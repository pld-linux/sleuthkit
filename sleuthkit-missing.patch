--- sleuthkit-4.12.0/tsk/pool/tsk_lvm.hpp.orig	1970-01-01 01:00:00.000000000 +0100
+++ sleuthkit-4.12.0/tsk/pool/tsk_lvm.hpp	2023-06-18 13:52:11.678090561 +0200
@@ -0,0 +1,51 @@
+/*
+ * The Sleuth Kit - Add on for Linux LVM support
+ *
+ * Copyright (c) 2022 Joachim Metz <joachim.metz@gmail.com>
+ *
+ * This software is distributed under the Common Public License 1.0
+ */
+
+#pragma once
+
+#include "tsk/base/tsk_base_i.h"
+
+#if HAVE_LIBVSLVM
+
+#include "tsk_pool.hpp"
+
+#include <libbfio.h>
+#include <libvslvm.h>
+
+class LVMPool;
+
+class LVMPool : public TSKPool {
+ protected:
+  TSK_IMG_INFO *_img;
+  // Start of the pool data within the image
+  TSK_OFF_T _offset;
+  libbfio_pool_t *_file_io_pool = NULL;
+  libvslvm_handle_t *_lvm_handle = NULL;
+  libvslvm_volume_group_t *_lvm_volume_group = NULL;
+
+ public:
+  LVMPool(std::vector<img_t> &&imgs);
+
+  // Moveable
+  LVMPool(LVMPool &&) = default;
+  LVMPool &operator=(LVMPool &&) = default;
+
+  // Not copyable because of TSK_IMG_INFO pointer
+  LVMPool(const LVMPool &) = delete;
+  LVMPool &operator=(const LVMPool &) = delete;
+
+  ~LVMPool();
+
+  std::string identifier;
+
+  ssize_t read(uint64_t address, char *buf, size_t buf_size) const
+      noexcept final;
+};
+
+#endif /* HAVE_LIBVSLVM */
+
--- sleuthkit-4.12.0/tsk/pool/img_bfio_handle.h.orig	1970-01-01 01:00:00.000000000 +0100
+++ sleuthkit-4.12.0/tsk/pool/img_bfio_handle.h	2023-06-18 17:01:32.999874331 +0200
@@ -0,0 +1,90 @@
+/*
+ * The Sleuth Kit - Image BFIO handle
+ *
+ * Copyright (c) 2022 Joachim Metz <joachim.metz@gmail.com>
+ *
+ * This software is distributed under the Common Public License 1.0
+ */
+
+#if !defined( _IMG_BFIO_HANDLE_H )
+#define _IMG_BFIO_HANDLE_H
+
+#include "tsk/base/tsk_base_i.h"
+
+#ifdef HAVE_LIBBFIO
+
+#include <libbfio.h>
+
+#include "tsk/img/tsk_img.h"
+
+#if defined( __cplusplus )
+extern "C" {
+#endif
+
+typedef struct img_bfio_handle img_bfio_handle_t;
+
+struct img_bfio_handle
+{
+	TSK_IMG_INFO *image;
+	TSK_OFF_T base_offset;
+	TSK_OFF_T logical_offset;
+	int access_flags;
+};
+
+int img_bfio_handle_initialize(
+     libbfio_handle_t **handle,
+     TSK_IMG_INFO *image,
+     TSK_OFF_T offset,
+     libbfio_error_t **error );
+
+int img_bfio_handle_free(
+     img_bfio_handle_t **img_bfio_handle,
+     libbfio_error_t **error );
+
+int img_bfio_handle_clone(
+     img_bfio_handle_t **destination_img_bfio_handle,
+     img_bfio_handle_t *source_img_bfio_handle,
+     libbfio_error_t **error );
+
+int img_bfio_handle_open(
+     img_bfio_handle_t *img_bfio_handle,
+     int access_flags,
+     libbfio_error_t **error );
+
+int img_bfio_handle_close(
+     img_bfio_handle_t *img_bfio_handle,
+     libbfio_error_t **error );
+
+ssize_t img_bfio_handle_read(
+         img_bfio_handle_t *img_bfio_handle,
+         uint8_t *buffer,
+         size_t size,
+         libbfio_error_t **error );
+
+off64_t img_bfio_handle_seek_offset(
+         img_bfio_handle_t *img_bfio_handle,
+         off64_t offset,
+         int whence,
+         libbfio_error_t **error );
+
+int img_bfio_handle_exists(
+     img_bfio_handle_t *img_bfio_handle,
+     libbfio_error_t **error );
+
+int img_bfio_handle_is_open(
+     img_bfio_handle_t *img_bfio_handle,
+     libbfio_error_t **error );
+
+int img_bfio_handle_get_size(
+     img_bfio_handle_t *img_bfio_handle,
+     size64_t *size,
+     libbfio_error_t **error );
+
+#if defined( __cplusplus )
+}
+#endif
+
+#endif /* HAVE_LIBBFIO */
+
+#endif /* !defined( _IMG_BFIO_HANDLE_H ) */
+
